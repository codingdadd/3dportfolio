/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: nimzu (https://sketchfab.com/nimzuk)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/foxs-islands-163b68e09fcc47618450150be7785907
Title: Fox's islands
*/

import {useRef , useEffect} from "react";
import { useGLTF } from "@react-three/drei";
import { useFrame, useThree } from "@react-three/fiber";
import {a} from'@react-spring/three';
import isLandScene from '../assets/3d/island.glb';


const Island = ({isRotating , setIsRotating , setCurrentStage , ...props}) => {
  const isLandRef = useRef()
  const { nodes, materials } = useGLTF(isLandScene);
  const {gl, viewport} = useThree();
  const lastX = useRef(0);    //TO know the last position of the mouse 
  const rotationSpeed = useRef(0);  // to make rotation speed 0
  const dampingFactor = 0.95;   // this is usefull for how fast the model will move or response

  const handlePonterDown =(e) =>{
 e.stopPropagation();  // this means the mouse will do what is in this fuction and will not touch anyother element
 e.preventDefault();
 setIsRotating(true);
 const clientX = e.touches ? e.touches[0].clientX : e.clientX;
 lastX.current = clientX;

 


  }
  const handlePonterUp =(e) =>{
 e.stopPropagation();  
 e.preventDefault();
 setIsRotating(false); 
 const clientX = e.touches ? e.touches[0].clientX : e.clientX;
 lastX.current = clientX;
 
 
 // this will be false 

//  const clientX = e.touches ? e.touches[0].clientX : e.clientX;

//  const delta = (clientX - lastX.current) / viewport.width;  // delta will be know as change. here clientX is staring point last.current is current point / viewport of the screen
 
//  isLandRef.current.rotation.y += delta * 0.01* math.PI;  // y means top and bottom and we +=changes(delta) *0.0.1* math.Pi as it is a circle

//  lastX.current = clientX ; // update the prepogation

//  rotationSpeed.current = delta *0.01* math.PI;

}
  const handlePonterMove =(e) =>{
 e.stopPropagation();  
 e.preventDefault();
 

 if(isRotating){
  const clientX = 
  e.touches ?
   e.touches[0].clientX : 
   e.clientX;

  const delta = (clientX - lastX.current) / viewport.width;
  isLandRef.current.rotation.y += delta * 0.01* Math.PI;
  lastX.current = clientX ; // update the prepogation
  rotationSpeed.current = delta *0.01* Math.PI;

 }
  }
  
  //for the keyboard event

  const handleKeyDown =(e) => {
    if (e.key ===  'ArrowLeft' ){
      if(!isRotating) setIsRotating(true);
      isLandRef.current.rotation.y += 0.01 * Math.PI;

    } else if (e.key === 'ArrowRight'){
      if(!isRotating) setIsRotating(true);
      isLandRef.current.rotation.y -= 0.01 * Math.PI;
    }
  }

  const handleKeyUp =(e) =>{
    if(e.key === 'ArrowLeft' || e.key === 'ArrowRight'){
      setIsRotating(false);
    }
  }

  // we will use a special hook use frame which will call back every single frame

useFrame(() =>{
  if(!isRotating){
    rotationSpeed.current *= dampingFactor;
  if(Math.abs(rotationSpeed.current) < 0.001){
    rotationSpeed.current = 0;

    isLandRef.current.rotation.y += rotationSpeed.current;
  }
  }else{
    const rotation = isLandRef.current.rotation.y;

    const normalizedRotation =
        ((rotation % (2 * Math.PI)) + 2 * Math.PI) % (2 * Math.PI);

      // Set the current stage based on the island's orientation
      switch (true) {
        case normalizedRotation >= 5.45 && normalizedRotation <= 5.85:
          setCurrentStage(4);
          break;
        case normalizedRotation >= 0.85 && normalizedRotation <= 1.3:
          setCurrentStage(3);
          break;
        case normalizedRotation >= 2.4 && normalizedRotation <= 2.6:
          setCurrentStage(2);
          break;
        case normalizedRotation >= 4.25 && normalizedRotation <= 4.75:
          setCurrentStage(1);
          break;
        default:
          setCurrentStage();
      }
  }
}

)



//this will add the events and also will remove when we leave the page
  useEffect(()=>{

    const canvas = gl.domElement;   // because we are touching a dom of canvas
    canvas.addEventListener('pointerup', handlePonterUp);
    canvas.addEventListener('pointerdown', handlePonterDown);
    canvas.addEventListener('pointermove', handlePonterMove);
    document.addEventListener('Keydown', handleKeyDown);
    document.addEventListener('keyup', handleKeyUp);
    

    return() =>{
      canvas.removeEventListener('pointerDown', handlePonterDown);
      canvas.removeEventListener('pointerUp', handlePonterUp);
      canvas.removeEventListener('pointerMove', handlePonterMove);
      document.removeEventListener('Keydown', handleKeyDown);
      document.removeEventListener('keyup', handleKeyUp);
    }

  },[gl , handlePonterDown, handlePonterMove, handlePonterUp,handleKeyDown,handleKeyUp])


  return (

    <a.group ref={isLandRef }{...props}>
      <mesh
        
        
        geometry={nodes.polySurface944_tree_body_0.geometry}
        material={materials.PaletteMaterial001}
      />
      <mesh
        
        
        geometry={nodes.polySurface945_tree1_0.geometry}
        material={materials.PaletteMaterial001}
      />
      <mesh
        
        
        geometry={nodes.polySurface946_tree2_0.geometry}
        material={materials.PaletteMaterial001}
      />
      <mesh
        
        
        geometry={nodes.polySurface947_tree1_0.geometry}
        material={materials.PaletteMaterial001}
      />
      <mesh
        
        
        geometry={nodes.polySurface948_tree_body_0.geometry}
        material={materials.PaletteMaterial001}
      />
      <mesh
        
        
        geometry={nodes.polySurface949_tree_body_0.geometry}
        material={materials.PaletteMaterial001}
      />
      <mesh
        
        
        geometry={nodes.pCube11_rocks1_0.geometry}
        material={materials.PaletteMaterial001}
      />
    </a.group>
  );
}


export default Island;